package com.openfooddata.app.model;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.openfooddata.app.model.Product;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PRODUCT.
*/
public class ProductDao extends AbstractDao<Product, Long> {

    public static final String TABLENAME = "PRODUCT";

    /**
     * Properties of entity Product.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Barcode = new Property(2, String.class, "barcode", false, "BARCODE");
        public final static Property Img_url = new Property(3, String.class, "img_url", false, "IMG_URL");
        public final static Property Capacity = new Property(4, String.class, "capacity", false, "CAPACITY");
        public final static Property Capacity_unit = new Property(5, String.class, "capacity_unit", false, "CAPACITY_UNIT");
        public final static Property Serving_vol = new Property(6, String.class, "serving_vol", false, "SERVING_VOL");
        public final static Property Serving_size = new Property(7, String.class, "serving_size", false, "SERVING_SIZE");
        public final static Property Calory_kcal = new Property(8, String.class, "calory_kcal", false, "CALORY_KCAL");
        public final static Property Protein_g = new Property(9, String.class, "protein_g", false, "PROTEIN_G");
        public final static Property Fat_g = new Property(10, String.class, "fat_g", false, "FAT_G");
        public final static Property Fat_saturated_g = new Property(11, String.class, "fat_saturated_g", false, "FAT_SATURATED_G");
        public final static Property Fat_trans_g = new Property(12, String.class, "fat_trans_g", false, "FAT_TRANS_G");
        public final static Property Carbohydrate_g = new Property(13, String.class, "carbohydrate_g", false, "CARBOHYDRATE_G");
        public final static Property Sodium_mg = new Property(14, String.class, "sodium_mg", false, "SODIUM_MG");
        public final static Property Img_uri = new Property(15, String.class, "img_uri", false, "IMG_URI");
        public final static Property Is_watched = new Property(16, Boolean.class, "is_watched", false, "IS_WATCHED");
        public final static Property Created_at = new Property(17, java.util.Date.class, "created_at", false, "CREATED_AT");
        public final static Property Updated_at = new Property(18, java.util.Date.class, "updated_at", false, "UPDATED_AT");
        public final static Property Rec_score = new Property(19, Integer.class, "rec_score", false, "REC_SCORE");
        public final static Property Hot_score = new Property(20, Integer.class, "hot_score", false, "HOT_SCORE");
        public final static Property Company_id = new Property(21, long.class, "company_id", false, "COMPANY_ID");
    };

    private DaoSession daoSession;

    private Query<Product> company_ProductListQuery;

    public ProductDao(DaoConfig config) {
        super(config);
    }
    
    public ProductDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PRODUCT' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'NAME' TEXT UNIQUE ," + // 1: name
                "'BARCODE' TEXT," + // 2: barcode
                "'IMG_URL' TEXT," + // 3: img_url
                "'CAPACITY' TEXT," + // 4: capacity
                "'CAPACITY_UNIT' TEXT," + // 5: capacity_unit
                "'SERVING_VOL' TEXT," + // 6: serving_vol
                "'SERVING_SIZE' TEXT," + // 7: serving_size
                "'CALORY_KCAL' TEXT," + // 8: calory_kcal
                "'PROTEIN_G' TEXT," + // 9: protein_g
                "'FAT_G' TEXT," + // 10: fat_g
                "'FAT_SATURATED_G' TEXT," + // 11: fat_saturated_g
                "'FAT_TRANS_G' TEXT," + // 12: fat_trans_g
                "'CARBOHYDRATE_G' TEXT," + // 13: carbohydrate_g
                "'SODIUM_MG' TEXT," + // 14: sodium_mg
                "'IMG_URI' TEXT," + // 15: img_uri
                "'IS_WATCHED' INTEGER," + // 16: is_watched
                "'CREATED_AT' INTEGER," + // 17: created_at
                "'UPDATED_AT' INTEGER," + // 18: updated_at
                "'REC_SCORE' INTEGER," + // 19: rec_score
                "'HOT_SCORE' INTEGER," + // 20: hot_score
                "'COMPANY_ID' INTEGER NOT NULL );"); // 21: company_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PRODUCT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Product entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String barcode = entity.getBarcode();
        if (barcode != null) {
            stmt.bindString(3, barcode);
        }
 
        String img_url = entity.getImg_url();
        if (img_url != null) {
            stmt.bindString(4, img_url);
        }
 
        String capacity = entity.getCapacity();
        if (capacity != null) {
            stmt.bindString(5, capacity);
        }
 
        String capacity_unit = entity.getCapacity_unit();
        if (capacity_unit != null) {
            stmt.bindString(6, capacity_unit);
        }
 
        String serving_vol = entity.getServing_vol();
        if (serving_vol != null) {
            stmt.bindString(7, serving_vol);
        }
 
        String serving_size = entity.getServing_size();
        if (serving_size != null) {
            stmt.bindString(8, serving_size);
        }
 
        String calory_kcal = entity.getCalory_kcal();
        if (calory_kcal != null) {
            stmt.bindString(9, calory_kcal);
        }
 
        String protein_g = entity.getProtein_g();
        if (protein_g != null) {
            stmt.bindString(10, protein_g);
        }
 
        String fat_g = entity.getFat_g();
        if (fat_g != null) {
            stmt.bindString(11, fat_g);
        }
 
        String fat_saturated_g = entity.getFat_saturated_g();
        if (fat_saturated_g != null) {
            stmt.bindString(12, fat_saturated_g);
        }
 
        String fat_trans_g = entity.getFat_trans_g();
        if (fat_trans_g != null) {
            stmt.bindString(13, fat_trans_g);
        }
 
        String carbohydrate_g = entity.getCarbohydrate_g();
        if (carbohydrate_g != null) {
            stmt.bindString(14, carbohydrate_g);
        }
 
        String sodium_mg = entity.getSodium_mg();
        if (sodium_mg != null) {
            stmt.bindString(15, sodium_mg);
        }
 
        String img_uri = entity.getImg_uri();
        if (img_uri != null) {
            stmt.bindString(16, img_uri);
        }
 
        Boolean is_watched = entity.getIs_watched();
        if (is_watched != null) {
            stmt.bindLong(17, is_watched ? 1l: 0l);
        }
 
        java.util.Date created_at = entity.getCreated_at();
        if (created_at != null) {
            stmt.bindLong(18, created_at.getTime());
        }
 
        java.util.Date updated_at = entity.getUpdated_at();
        if (updated_at != null) {
            stmt.bindLong(19, updated_at.getTime());
        }
 
        Integer rec_score = entity.getRec_score();
        if (rec_score != null) {
            stmt.bindLong(20, rec_score);
        }
 
        Integer hot_score = entity.getHot_score();
        if (hot_score != null) {
            stmt.bindLong(21, hot_score);
        }
        stmt.bindLong(22, entity.getCompany_id());
    }

    @Override
    protected void attachEntity(Product entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Product readEntity(Cursor cursor, int offset) {
        Product entity = new Product( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // barcode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // img_url
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // capacity
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // capacity_unit
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // serving_vol
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // serving_size
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // calory_kcal
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // protein_g
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // fat_g
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // fat_saturated_g
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // fat_trans_g
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // carbohydrate_g
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // sodium_mg
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // img_uri
            cursor.isNull(offset + 16) ? null : cursor.getShort(offset + 16) != 0, // is_watched
            cursor.isNull(offset + 17) ? null : new java.util.Date(cursor.getLong(offset + 17)), // created_at
            cursor.isNull(offset + 18) ? null : new java.util.Date(cursor.getLong(offset + 18)), // updated_at
            cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19), // rec_score
            cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20), // hot_score
            cursor.getLong(offset + 21) // company_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Product entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBarcode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setImg_url(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCapacity(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCapacity_unit(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setServing_vol(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setServing_size(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCalory_kcal(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setProtein_g(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setFat_g(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setFat_saturated_g(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setFat_trans_g(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCarbohydrate_g(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setSodium_mg(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setImg_uri(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setIs_watched(cursor.isNull(offset + 16) ? null : cursor.getShort(offset + 16) != 0);
        entity.setCreated_at(cursor.isNull(offset + 17) ? null : new java.util.Date(cursor.getLong(offset + 17)));
        entity.setUpdated_at(cursor.isNull(offset + 18) ? null : new java.util.Date(cursor.getLong(offset + 18)));
        entity.setRec_score(cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19));
        entity.setHot_score(cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20));
        entity.setCompany_id(cursor.getLong(offset + 21));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Product entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Product entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "productList" to-many relationship of Company. */
    public List<Product> _queryCompany_ProductList(long company_id) {
        synchronized (this) {
            if (company_ProductListQuery == null) {
                QueryBuilder<Product> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Company_id.eq(null));
                company_ProductListQuery = queryBuilder.build();
            }
        }
        Query<Product> query = company_ProductListQuery.forCurrentThread();
        query.setParameter(0, company_id);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getCompanyDao().getAllColumns());
            builder.append(" FROM PRODUCT T");
            builder.append(" LEFT JOIN COMPANY T0 ON T.'COMPANY_ID'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Product loadCurrentDeep(Cursor cursor, boolean lock) {
        Product entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Company company = loadCurrentOther(daoSession.getCompanyDao(), cursor, offset);
         if(company != null) {
            entity.setCompany(company);
        }

        return entity;    
    }

    public Product loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Product> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Product> list = new ArrayList<Product>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Product> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Product> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
