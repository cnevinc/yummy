package com.openfooddata.app.model;

import java.util.List;
import com.openfooddata.app.model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table TEST_PROJECT.
 */
public class TestProject {

    private Long id;
    private String proposer;
    private String title;
    private String description;
    private Double target_amount;
    private Double current_amount;
    private Integer current_donators;
    private String start_date;
    private String deadline;
    private String test_items;
    private String testers;
    private long product_id;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient TestProjectDao myDao;

    private Product product;
    private Long product__resolvedKey;

    private List<Donation> donationList;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public TestProject() {
    }

    public TestProject(Long id) {
        this.id = id;
    }

    public TestProject(Long id, String proposer, String title, String description, Double target_amount, Double current_amount, Integer current_donators, String start_date, String deadline, String test_items, String testers, long product_id) {
        this.id = id;
        this.proposer = proposer;
        this.title = title;
        this.description = description;
        this.target_amount = target_amount;
        this.current_amount = current_amount;
        this.current_donators = current_donators;
        this.start_date = start_date;
        this.deadline = deadline;
        this.test_items = test_items;
        this.testers = testers;
        this.product_id = product_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTestProjectDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getProposer() {
        return proposer;
    }

    public void setProposer(String proposer) {
        this.proposer = proposer;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public Double getTarget_amount() {
        return target_amount;
    }

    public void setTarget_amount(Double target_amount) {
        this.target_amount = target_amount;
    }

    public Double getCurrent_amount() {
        return current_amount;
    }

    public void setCurrent_amount(Double current_amount) {
        this.current_amount = current_amount;
    }

    public Integer getCurrent_donators() {
        return current_donators;
    }

    public void setCurrent_donators(Integer current_donators) {
        this.current_donators = current_donators;
    }

    public String getStart_date() {
        return start_date;
    }

    public void setStart_date(String start_date) {
        this.start_date = start_date;
    }

    public String getDeadline() {
        return deadline;
    }

    public void setDeadline(String deadline) {
        this.deadline = deadline;
    }

    public String getTest_items() {
        return test_items;
    }

    public void setTest_items(String test_items) {
        this.test_items = test_items;
    }

    public String getTesters() {
        return testers;
    }

    public void setTesters(String testers) {
        this.testers = testers;
    }

    public long getProduct_id() {
        return product_id;
    }

    public void setProduct_id(long product_id) {
        this.product_id = product_id;
    }

    /** To-one relationship, resolved on first access. */
    public Product getProduct() {
        long __key = this.product_id;
        if (product__resolvedKey == null || !product__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ProductDao targetDao = daoSession.getProductDao();
            Product productNew = targetDao.load(__key);
            synchronized (this) {
                product = productNew;
            	product__resolvedKey = __key;
            }
        }
        return product;
    }

    public void setProduct(Product product) {
        if (product == null) {
            throw new DaoException("To-one property 'product_id' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.product = product;
            product_id = product.getId();
            product__resolvedKey = product_id;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Donation> getDonationList() {
        if (donationList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DonationDao targetDao = daoSession.getDonationDao();
            List<Donation> donationListNew = targetDao._queryTestProject_DonationList(id);
            synchronized (this) {
                if(donationList == null) {
                    donationList = donationListNew;
                }
            }
        }
        return donationList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetDonationList() {
        donationList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
