package com.openfooddata.app.model;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.openfooddata.app.model.Donation;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DONATION.
*/
public class DonationDao extends AbstractDao<Donation, Long> {

    public static final String TABLENAME = "DONATION";

    /**
     * Properties of entity Donation.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Status = new Property(1, String.class, "status", false, "STATUS");
        public final static Property Amount = new Property(2, Double.class, "amount", false, "AMOUNT");
        public final static Property Created_at = new Property(3, String.class, "created_at", false, "CREATED_AT");
        public final static Property Updated_at = new Property(4, String.class, "updated_at", false, "UPDATED_AT");
        public final static Property Test_project_id = new Property(5, long.class, "test_project_id", false, "TEST_PROJECT_ID");
        public final static Property User_id = new Property(6, long.class, "user_id", false, "USER_ID");
    };

    private DaoSession daoSession;

    private Query<Donation> testProject_DonationListQuery;
    private Query<Donation> user_DonationListQuery;

    public DonationDao(DaoConfig config) {
        super(config);
    }
    
    public DonationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DONATION' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'STATUS' TEXT," + // 1: status
                "'AMOUNT' REAL," + // 2: amount
                "'CREATED_AT' TEXT," + // 3: created_at
                "'UPDATED_AT' TEXT," + // 4: updated_at
                "'TEST_PROJECT_ID' INTEGER NOT NULL ," + // 5: test_project_id
                "'USER_ID' INTEGER NOT NULL );"); // 6: user_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DONATION'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Donation entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(2, status);
        }
 
        Double amount = entity.getAmount();
        if (amount != null) {
            stmt.bindDouble(3, amount);
        }
 
        String created_at = entity.getCreated_at();
        if (created_at != null) {
            stmt.bindString(4, created_at);
        }
 
        String updated_at = entity.getUpdated_at();
        if (updated_at != null) {
            stmt.bindString(5, updated_at);
        }
        stmt.bindLong(6, entity.getTest_project_id());
        stmt.bindLong(7, entity.getUser_id());
    }

    @Override
    protected void attachEntity(Donation entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Donation readEntity(Cursor cursor, int offset) {
        Donation entity = new Donation( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // status
            cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2), // amount
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // created_at
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // updated_at
            cursor.getLong(offset + 5), // test_project_id
            cursor.getLong(offset + 6) // user_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Donation entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStatus(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAmount(cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2));
        entity.setCreated_at(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUpdated_at(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTest_project_id(cursor.getLong(offset + 5));
        entity.setUser_id(cursor.getLong(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Donation entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Donation entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "donationList" to-many relationship of TestProject. */
    public List<Donation> _queryTestProject_DonationList(long test_project_id) {
        synchronized (this) {
            if (testProject_DonationListQuery == null) {
                QueryBuilder<Donation> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Test_project_id.eq(null));
                testProject_DonationListQuery = queryBuilder.build();
            }
        }
        Query<Donation> query = testProject_DonationListQuery.forCurrentThread();
        query.setParameter(0, test_project_id);
        return query.list();
    }

    /** Internal query to resolve the "donationList" to-many relationship of User. */
    public List<Donation> _queryUser_DonationList(long user_id) {
        synchronized (this) {
            if (user_DonationListQuery == null) {
                QueryBuilder<Donation> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.User_id.eq(null));
                user_DonationListQuery = queryBuilder.build();
            }
        }
        Query<Donation> query = user_DonationListQuery.forCurrentThread();
        query.setParameter(0, user_id);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getProductDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getUserDao().getAllColumns());
            builder.append(" FROM DONATION T");
            builder.append(" LEFT JOIN PRODUCT T0 ON T.'TEST_PROJECT_ID'=T0.'_id'");
            builder.append(" LEFT JOIN USER T1 ON T.'USER_ID'=T1.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Donation loadCurrentDeep(Cursor cursor, boolean lock) {
        Donation entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Product product = loadCurrentOther(daoSession.getProductDao(), cursor, offset);
         if(product != null) {
            entity.setProduct(product);
        }
        offset += daoSession.getProductDao().getAllColumns().length;

        User user = loadCurrentOther(daoSession.getUserDao(), cursor, offset);
         if(user != null) {
            entity.setUser(user);
        }

        return entity;    
    }

    public Donation loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Donation> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Donation> list = new ArrayList<Donation>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Donation> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Donation> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
