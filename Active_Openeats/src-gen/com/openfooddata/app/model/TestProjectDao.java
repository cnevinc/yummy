package com.openfooddata.app.model;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.openfooddata.app.model.TestProject;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TEST_PROJECT.
*/
public class TestProjectDao extends AbstractDao<TestProject, Long> {

    public static final String TABLENAME = "TEST_PROJECT";

    /**
     * Properties of entity TestProject.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Proposer = new Property(1, String.class, "proposer", false, "PROPOSER");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Description = new Property(3, String.class, "description", false, "DESCRIPTION");
        public final static Property Target_amount = new Property(4, Double.class, "target_amount", false, "TARGET_AMOUNT");
        public final static Property Current_amount = new Property(5, Double.class, "current_amount", false, "CURRENT_AMOUNT");
        public final static Property Current_donators = new Property(6, Integer.class, "current_donators", false, "CURRENT_DONATORS");
        public final static Property Start_date = new Property(7, String.class, "start_date", false, "START_DATE");
        public final static Property Deadline = new Property(8, String.class, "deadline", false, "DEADLINE");
        public final static Property Test_items = new Property(9, String.class, "test_items", false, "TEST_ITEMS");
        public final static Property Testers = new Property(10, String.class, "testers", false, "TESTERS");
        public final static Property Product_id = new Property(11, long.class, "product_id", false, "PRODUCT_ID");
    };

    private DaoSession daoSession;

    private Query<TestProject> product_TestProjectListQuery;

    public TestProjectDao(DaoConfig config) {
        super(config);
    }
    
    public TestProjectDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TEST_PROJECT' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'PROPOSER' TEXT," + // 1: proposer
                "'TITLE' TEXT," + // 2: title
                "'DESCRIPTION' TEXT," + // 3: description
                "'TARGET_AMOUNT' REAL," + // 4: target_amount
                "'CURRENT_AMOUNT' REAL," + // 5: current_amount
                "'CURRENT_DONATORS' INTEGER," + // 6: current_donators
                "'START_DATE' TEXT," + // 7: start_date
                "'DEADLINE' TEXT," + // 8: deadline
                "'TEST_ITEMS' TEXT," + // 9: test_items
                "'TESTERS' TEXT," + // 10: testers
                "'PRODUCT_ID' INTEGER NOT NULL );"); // 11: product_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TEST_PROJECT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TestProject entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String proposer = entity.getProposer();
        if (proposer != null) {
            stmt.bindString(2, proposer);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(4, description);
        }
 
        Double target_amount = entity.getTarget_amount();
        if (target_amount != null) {
            stmt.bindDouble(5, target_amount);
        }
 
        Double current_amount = entity.getCurrent_amount();
        if (current_amount != null) {
            stmt.bindDouble(6, current_amount);
        }
 
        Integer current_donators = entity.getCurrent_donators();
        if (current_donators != null) {
            stmt.bindLong(7, current_donators);
        }
 
        String start_date = entity.getStart_date();
        if (start_date != null) {
            stmt.bindString(8, start_date);
        }
 
        String deadline = entity.getDeadline();
        if (deadline != null) {
            stmt.bindString(9, deadline);
        }
 
        String test_items = entity.getTest_items();
        if (test_items != null) {
            stmt.bindString(10, test_items);
        }
 
        String testers = entity.getTesters();
        if (testers != null) {
            stmt.bindString(11, testers);
        }
        stmt.bindLong(12, entity.getProduct_id());
    }

    @Override
    protected void attachEntity(TestProject entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TestProject readEntity(Cursor cursor, int offset) {
        TestProject entity = new TestProject( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // proposer
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // description
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // target_amount
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // current_amount
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // current_donators
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // start_date
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // deadline
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // test_items
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // testers
            cursor.getLong(offset + 11) // product_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TestProject entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setProposer(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDescription(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTarget_amount(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setCurrent_amount(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setCurrent_donators(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setStart_date(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDeadline(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTest_items(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTesters(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setProduct_id(cursor.getLong(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TestProject entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TestProject entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "testProjectList" to-many relationship of Product. */
    public List<TestProject> _queryProduct_TestProjectList(long product_id) {
        synchronized (this) {
            if (product_TestProjectListQuery == null) {
                QueryBuilder<TestProject> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Product_id.eq(null));
                product_TestProjectListQuery = queryBuilder.build();
            }
        }
        Query<TestProject> query = product_TestProjectListQuery.forCurrentThread();
        query.setParameter(0, product_id);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getProductDao().getAllColumns());
            builder.append(" FROM TEST_PROJECT T");
            builder.append(" LEFT JOIN PRODUCT T0 ON T.'PRODUCT_ID'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected TestProject loadCurrentDeep(Cursor cursor, boolean lock) {
        TestProject entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Product product = loadCurrentOther(daoSession.getProductDao(), cursor, offset);
         if(product != null) {
            entity.setProduct(product);
        }

        return entity;    
    }

    public TestProject loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<TestProject> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<TestProject> list = new ArrayList<TestProject>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<TestProject> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<TestProject> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
