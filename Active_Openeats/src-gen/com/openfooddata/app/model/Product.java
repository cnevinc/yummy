package com.openfooddata.app.model;

import java.util.List;
import com.openfooddata.app.model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table PRODUCT.
 */
public class Product {

    private Long id;
    private String name;
    private String barcode;
    private String img_url;
    private String capacity;
    private String capacity_unit;
    private String serving_vol;
    private String serving_size;
    private String calory_kcal;
    private String protein_g;
    private String fat_g;
    private String fat_saturated_g;
    private String fat_trans_g;
    private String carbohydrate_g;
    private String sodium_mg;
    private String img_uri;
    private Boolean is_watched;
    private java.util.Date created_at;
    private java.util.Date updated_at;
    private Integer rec_score;
    private Integer hot_score;
    private long company_id;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ProductDao myDao;

    private Company company;
    private Long company__resolvedKey;

    private List<TestProject> testProjectList;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Product() {
    }

    public Product(Long id) {
        this.id = id;
    }

    public Product(Long id, String name, String barcode, String img_url, String capacity, String capacity_unit, String serving_vol, String serving_size, String calory_kcal, String protein_g, String fat_g, String fat_saturated_g, String fat_trans_g, String carbohydrate_g, String sodium_mg, String img_uri, Boolean is_watched, java.util.Date created_at, java.util.Date updated_at, Integer rec_score, Integer hot_score, long company_id) {
        this.id = id;
        this.name = name;
        this.barcode = barcode;
        this.img_url = img_url;
        this.capacity = capacity;
        this.capacity_unit = capacity_unit;
        this.serving_vol = serving_vol;
        this.serving_size = serving_size;
        this.calory_kcal = calory_kcal;
        this.protein_g = protein_g;
        this.fat_g = fat_g;
        this.fat_saturated_g = fat_saturated_g;
        this.fat_trans_g = fat_trans_g;
        this.carbohydrate_g = carbohydrate_g;
        this.sodium_mg = sodium_mg;
        this.img_uri = img_uri;
        this.is_watched = is_watched;
        this.created_at = created_at;
        this.updated_at = updated_at;
        this.rec_score = rec_score;
        this.hot_score = hot_score;
        this.company_id = company_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getProductDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getBarcode() {
        return barcode;
    }

    public void setBarcode(String barcode) {
        this.barcode = barcode;
    }

    public String getImg_url() {
        return img_url;
    }

    public void setImg_url(String img_url) {
        this.img_url = img_url;
    }

    public String getCapacity() {
        return capacity;
    }

    public void setCapacity(String capacity) {
        this.capacity = capacity;
    }

    public String getCapacity_unit() {
        return capacity_unit;
    }

    public void setCapacity_unit(String capacity_unit) {
        this.capacity_unit = capacity_unit;
    }

    public String getServing_vol() {
        return serving_vol;
    }

    public void setServing_vol(String serving_vol) {
        this.serving_vol = serving_vol;
    }

    public String getServing_size() {
        return serving_size;
    }

    public void setServing_size(String serving_size) {
        this.serving_size = serving_size;
    }

    public String getCalory_kcal() {
        return calory_kcal;
    }

    public void setCalory_kcal(String calory_kcal) {
        this.calory_kcal = calory_kcal;
    }

    public String getProtein_g() {
        return protein_g;
    }

    public void setProtein_g(String protein_g) {
        this.protein_g = protein_g;
    }

    public String getFat_g() {
        return fat_g;
    }

    public void setFat_g(String fat_g) {
        this.fat_g = fat_g;
    }

    public String getFat_saturated_g() {
        return fat_saturated_g;
    }

    public void setFat_saturated_g(String fat_saturated_g) {
        this.fat_saturated_g = fat_saturated_g;
    }

    public String getFat_trans_g() {
        return fat_trans_g;
    }

    public void setFat_trans_g(String fat_trans_g) {
        this.fat_trans_g = fat_trans_g;
    }

    public String getCarbohydrate_g() {
        return carbohydrate_g;
    }

    public void setCarbohydrate_g(String carbohydrate_g) {
        this.carbohydrate_g = carbohydrate_g;
    }

    public String getSodium_mg() {
        return sodium_mg;
    }

    public void setSodium_mg(String sodium_mg) {
        this.sodium_mg = sodium_mg;
    }

    public String getImg_uri() {
        return img_uri;
    }

    public void setImg_uri(String img_uri) {
        this.img_uri = img_uri;
    }

    public Boolean getIs_watched() {
        return is_watched;
    }

    public void setIs_watched(Boolean is_watched) {
        this.is_watched = is_watched;
    }

    public java.util.Date getCreated_at() {
        return created_at;
    }

    public void setCreated_at(java.util.Date created_at) {
        this.created_at = created_at;
    }

    public java.util.Date getUpdated_at() {
        return updated_at;
    }

    public void setUpdated_at(java.util.Date updated_at) {
        this.updated_at = updated_at;
    }

    public Integer getRec_score() {
        return rec_score;
    }

    public void setRec_score(Integer rec_score) {
        this.rec_score = rec_score;
    }

    public Integer getHot_score() {
        return hot_score;
    }

    public void setHot_score(Integer hot_score) {
        this.hot_score = hot_score;
    }

    public long getCompany_id() {
        return company_id;
    }

    public void setCompany_id(long company_id) {
        this.company_id = company_id;
    }

    /** To-one relationship, resolved on first access. */
    public Company getCompany() {
        long __key = this.company_id;
        if (company__resolvedKey == null || !company__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CompanyDao targetDao = daoSession.getCompanyDao();
            Company companyNew = targetDao.load(__key);
            synchronized (this) {
                company = companyNew;
            	company__resolvedKey = __key;
            }
        }
        return company;
    }

    public void setCompany(Company company) {
        if (company == null) {
            throw new DaoException("To-one property 'company_id' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.company = company;
            company_id = company.getId();
            company__resolvedKey = company_id;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<TestProject> getTestProjectList() {
        if (testProjectList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TestProjectDao targetDao = daoSession.getTestProjectDao();
            List<TestProject> testProjectListNew = targetDao._queryProduct_TestProjectList(id);
            synchronized (this) {
                if(testProjectList == null) {
                    testProjectList = testProjectListNew;
                }
            }
        }
        return testProjectList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetTestProjectList() {
        testProjectList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
